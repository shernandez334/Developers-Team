@startuml

enum Status {
    ACTIVE
    DELETED
}

enum Difficulty {
    EASY
    MEDIUM
    HARD
    EPIC
}


class Main{

}

class EscapeRoom {
  + EcapeRoom()
  + void run()
}

interface DataBase {
    + boolean checkUser(String user, String password)
    + boolean isAdmin(User user)
    + void <? extends Element> addElement(Element e)
    + void <? extends Element> removeElement(Element e)
    + void <T extends Element> addElement(Room room, T t)
    + ArrayList<Element> getInventory()
    + BigDecimal getTotalValue()
    + ArrayList<Element> getRoomElements(Room room)
    + String generateCertificate(Player player)
    + Reward[] getRewards(Player player)
    + Reward[] getMissingRewards(Player player)
    + BigDecimal getTicketTotalValue()
    + Ticket getTicket(Player player)
    + Player[] getSubscribers()
    + void toggleSubscription(User user)
    + boolean isSubscribed(User user)
    + void addUser(T, t)
    + Map<int, String> getThemes()
    + Map<int, String> getMaterials()
    + void addMaterial()
    + void addTheme()
}

interface Subscribeable {
}

class Inventory {
    + BigDecimal getTotalValue()
    + String getInventoryDetails()
    + ArrayList<?> <? extends Element> getElements()
    + void removeElement(Element e, int quantity)
    + void addElement(Element e, int quantity)
}

abstract class Element {
  - id: int
  - name: String
  - quantity: int
  - price: BigDecimal
  - status: Status
}

class Room {
  - difficulty: Difficulty
  + void addClue(Clue clue, int quantity)
  + void addDecorItem(DecorItem item, int quantity)
  + BigDecimal getRoomValue()
  + Element[] getRoomElements()
}

class Clue {
  - theme: Theme
}

class DecorItem {
  - material: Material
}

abstract class User {
  - id: int
  - name: String
  - email: String
  - password: String
  + User login(String name, String password)
  + void logout()
}

class Admin {
    + BigDecimal getTotalIncome()
    + void <? exteds Element> createElement()
    + void addMaterial()
    + void addTheme()
}

class Player {
    + boolean isSubscribed()
    + void subscribe()
    + void unSuscribe()
    + void play(int roomId)
    + void buyTicket()
    + void getTicket()
    + Certificate generateCertificate()
    + ArrayList<Reward> getRewards()
}

class Ticket {
  - id: int
  - date: Date
  - price: BigDecimal
  - cashed: boolean
  + void cash()
}

class Certificate {
}

class Reward {
  - id: int
  - name: String
}

Main -- EscapeRoom
EscapeRoom -- Inventory : has
EscapeRoom -- User : has
EscapeRoom -- MySQL : uses
MySQL --|> DataBase
Inventory "1" -- "*" Element : has
Player "1" -- "0..1" Certificate : creates
Player "1" -- "0..*" Ticket : has
Player "1" -- "0..*" Reward : earns
Element <|-- Clue
Element <|-- DecorItem
Element <|-- Room
User <|-- Player
User <|-- Admin
Clue -- Theme : has
DecorItem -- Material : has
Room -- Difficulty : has
Element -- Status : has
Player -- Room : plays
Subscribeable <|-- Room
Subscribeable <|-- Clue
Subscribeable <|-- Reward

@enduml
